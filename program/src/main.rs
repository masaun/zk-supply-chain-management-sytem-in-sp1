//! A simple program that takes a number `n` as input, and writes the `n-1`th and `n`th fibonacci
//! number as an output.

// These two lines are necessary for the program to properly compile.
//
// Under the hood, we wrap your main function with some extra code so that it behaves properly
// inside the zkVM.
#![no_main]
sp1_zkvm::entrypoint!(main);

//use alloy_sol_types::SolType;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
struct ImageData {
    image_src: String,
    image_alt: String,
    //image_salt: String,
    height: u32,
    width: u32,
}

pub fn main() {
    // @dev - Store an output image data, which is generated by AI.
    let image_data: ImageData = sp1_zkvm::io::read::<ImageData>();
    // let _image_src: String = sp1_zkvm::io::read::<String>();
    // let _image_alt: String = sp1_zkvm::io::read::<String>();
    let image_salt: String = sp1_zkvm::io::read::<String>(); // Shuld be the "private" input (Not to be commited as a public value)
    // let _height: u32 = sp1_zkvm::io::read::<u32>();
    // let _width: u32 = sp1_zkvm::io::read::<u32>();

    // <Image
    //     src="/exampleImage.png"
    //     alt="Example Logo"
    //     width={450}
    //     height={150}
    // />

    println!("Image Source: {}", image_data.image_src);
    println!("Image Alt: {}", image_data.image_alt);
    println!("Image Salt: {}", image_salt);  // Shuld be the "private" input (Not to be commited as a public value)
    println!("Image Height: {}", image_data.height);
    println!("Image Width: {}", image_data.width);

    // Write the result (true or false) to the output.
    sp1_zkvm::io::commit(&image_data);
}
